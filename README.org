#+TITLE: Bomberman 2
#+AUTHOR: John Herrlin


#+BEGIN_SRC shell :results output code
  docker-compose -f arm64-docker-compose.yml up -d

  watch kafka-topics --list --bootstrap-server localhost:9092

  kafka-console-consumer \
      --topic s1 \
      --bootstrap-server localhost:9092 \
      --property print.key=true \
      --property key.separator=":" \
      --partition 0 \
      --from-beginning

  kafka-console-producer \
      --broker-list localhost:9092 \
      --topic s1 \
      --property parse.key=true \
      --property key.separator=":"

  kafkactl produce -k hejsan -v hoppsan s1

  watch curl -s http://localhost:8889/wordscountwindowed/hejsan
#+END_SRC


   When multiple hosts =KeyQueryMetadata= knows what instance has a specific
   key.

   #+BEGIN_SRC kotlin :results output code
     KeyQueryMetadata.getKeyMetadata
   #+END_SRC

   #+BEGIN_SRC text :results output code
     KeyQuery
     RangeQuery
     WindowKeyQuery
     WindowRangeQuery
   #+END_SRC

   https://blogs.apache.org/kafka/date/20220517
   KIP-796
   KIP-805
   KIP-806


.avsc


#+BEGIN_SRC shell :results output code
  curl http://localhost:8889/wordscount/hejsan
#+END_SRC

#+BEGIN_SRC shell :results output code
  cd /Users/john.herrlin/git/bomberman2/src/services/gateway2/src/main/avro && \
      java -jar /Users/john.herrlin/.m2/repository/org/apache/avro/avro-tools/1.11.1/avro-tools-1.11.1.jar compile schema Counter.avsc /Users/john.herrlin/git/bomberman2/src/services/gateway2/src/main/kotlin/

  cd /Users/john.herrlin/git/bomberman2/src/services/gateway2/src/main/avro && \
      java -jar /Users/john.herrlin/.m2/repository/org/apache/avro/avro-tools/1.11.1/avro-tools-1.11.1.jar compile schema *.avsc /Users/john.herrlin/git/bomberman2/src/services/gateway2/src/main/kotlin/
#+END_SRC



Bomberman 2 is my second attempt to build a bomberman game. My first attempt can
be found [[https://github.com/jherrlin/bomberman-with-clara][here]]. The main reason for that project was to learn about rule engines,
particularly [[clara-rules.org][Clara]] and the concept of event sourcing.

The main reason for this project is to get hands on experience with Kafka,
Kubernetes and Spring Boot / WebFlux. The aim is to create a backend system for
a bomberman game that is non-blocking and can scale.

I will try to use Kafkas stateful features to represent game states.

As this is a hobby project, it will be mostly hacking and just a bit of
planning.


https://app.diagrams.net/#G17Gn34H8VIUsH-RZyaFH083-taw6coT0G

* Schema registry

  Get schemas
  #+BEGIN_SRC shell :results output code
     curl -s "http://localhost:8081/subjects" | jq
  #+END_SRC

  #+RESULTS:
  #+begin_src shell
  []
  #+end_src

  Post schema
  #+BEGIN_SRC shell :results output code
    jq '. | {schema: tojson}' src/main/avro/avenger.avsc | \
    curl -s -X POST http://localhost:8081/subjects/avro-avengers-value/versions\
             -H "Content-Type: application/vnd.schemaregistry.v1+json" \
             -d @-  \
             | jq
  #+END_SRC

  Get all version of a specific schema
  #+BEGIN_SRC shell :results output code
    curl -s "http://localhost:8081/subjects/avro-avengers-value/versions" | jq
  #+END_SRC

  Get a specific version of a schema
  #+BEGIN_SRC shell :results output code
    curl -s "http://localhost:8081/subjects/avro-avengers-value/versions/1"\
     | jq '.'
  #+END_SRC

  Get the latest value of a schema
  #+BEGIN_SRC shell :results output code
    curl -s "http://localhost:8081/subjects/avro-avengers-value/
      versions/latest" | jq '.'
  #+END_SRC

* Kafka topics

  - cmd.start-game
  - cmd.join-game
  - cmd.

* Kafka, Zookeeper, schema-registry, ksqldb

  Before moving into k8s, lets use docker-compose to get something working.

  #+BEGIN_SRC shell :results output code
    docker-compose up -d
  #+END_SRC

* Learn Kafka
** Install Kafka

   #+BEGIN_SRC shell :results output code
     brew install kafka
   #+END_SRC

** Create topic

   #+BEGIN_SRC shell :results output code
     kafka-topics --create --bootstrap-server localhost:9092 --topic s1 --partitions 1 --replication-factor 1
     kafka-topics --create --bootstrap-server localhost:9092 --topic s2 --partitions 1 --replication-factor 1
   #+END_SRC

** List topics

   #+BEGIN_SRC shell :results output code
     kafka-topics --list --bootstrap-server localhost:9092
   #+END_SRC

** Describe topic

   #+BEGIN_SRC shell :results output code
     kafka-topics --describe --bootstrap-server localhost:9092 --topic <TOPIC-NAME>
   #+END_SRC

** Consume from topic from command line

   #+BEGIN_SRC shell :results output code
     kafka-console-consumer \
         --topic s1 \
         --bootstrap-server localhost:9092 \
         --property print.key=true \
         --property key.separator=":" \
         --partition 0 \
         --from-beginning
   #+END_SRC

** Produce to topic from command line

   #+BEGIN_SRC shell :results output code
     kafka-console-producer \
         --broker-list localhost:9092 \
         --topic s1 \
         --property parse.key=true \
         --property key.separator=":"
   #+END_SRC

* TODOs

  - [ ] Avro
  - [ ] Learn Kafka and Kafka Streams
  - [ ] Create the rule set
  - [ ] Create API service
  - [ ] Report service, to inspect previous games
  - [ ] Connect API and rules through Kafka
  - [ ] Run on Kubernetes

* API service

  is responsible for interacting with the outside world. It provides a websocket
  API where someone can listen to events for a specific game, so it's read only.
  The HTTP API is the way to interact with the game and its features.

* Public methods in API service

  - Create new game
  - Join game
  - Start game
  - Leave game
  - Inspect game
  - In game actions:
    - Move (north, west, east, south)
    - Place bomb
    - Throw bomb
